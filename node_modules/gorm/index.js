((api,pv,JsDK,DInterface,SessionFactory)=>{
    pv.ids=[];
    pv.autodetect=function(db){
      try {
         return db[0].constructor;
      } catch (e) {
        return Object;
      }
    };
    pv.implementsDomain=function(domain){
      Object.keys(DInterface._static).forEach((m)=>{
           domain[m]=DInterface._static[m];
      });
      Object.keys(DInterface.metaClass).forEach((m)=>{
           domain.prototype[m]=DInterface.metaClass[m];
      });
    };
    pv.generateString=function(size){
      var text = "";
       var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

       for( var i=0; i < size; i++ )
           text += possible.charAt(Math.floor(Math.random() * possible.length));
       return text;
    };
    pv.makeId=function(xtra){
           let id=pv.generateString(10)+xtra;
           while(pv.ids.indexOf(id)>=0){
             id=pv.generateString(10)+xtra;
           }
           pv.ids.push(id);
           return id;
    };
    pv.setId=function(instance){

        if(!instance[instance.constructor.GORM_ID || 'id']){
            instance[instance.constructor.GORM_ID || 'id']=pv.makeId(instance.constructor.toString().length);
        }
        return instance;
    };

    api.gorm=function(db,domain,withoutUnicity){
        db=(db instanceof Array)?db:[db];
        db=db.map((row)=>pv.setId(row));
        domain=domain || pv.autodetect(db);
        if(!api.gorm.sessionFactory.dbExist(domain)){
            pv.implementsDomain(domain);
        }
        api.gorm.sessionFactory.addDB(db,domain,withoutUnicity);

    };
    api.gorm.sessionFactory=new SessionFactory();
    api.gorm.idify=pv.setId;
    module.exports=api.gorm;

})({},{},require('x-class'),require('./DomainInterface.js'),require('./SessionFactory.js'))
